#include <iostream>
#include <vector>
#include <deque>

using namespace std;

#define ll long long int
#define FOR(i,a,b) for(int i = a; i <=b ; ++i)
#define pb push_back

static vector<int> cal_coeff(int n);
static ll cal_stable_value(deque<ll> init_number, vector<int> coeff);
int main()
{
	int n = 0;
	cin >> n;
	while (n != 0)
	{
		deque<ll> init_number;
		deque<ll> using_number;
		FOR(i, 0, n - 1)
		{
			ll temp_number;
			cin >> temp_number;
			init_number.pb(temp_number);
			
		}
		using_number = init_number;
		vector<int> coeff = cal_coeff(n);
		ll stable_value = cal_stable_value(init_number, coeff);

		// calculate the final value 
		ll k;
		cin >> k;
		ll final_result = 0;
		if (n % 2 == 0)
		{
			FOR(i, 1, k) // for k step
			{
				ll tem_result = stable_value;
				FOR(i, 0, using_number.size() - 2)
				{
					tem_result += coeff[i] * using_number[i + 1];
				}
				using_number.pop_front();
				using_number.pb(tem_result);
			}
		}
		else
		{
			FOR(i, 1, k) // for k step
			{
				ll tem_result = stable_value;
				FOR(i, 0, using_number.size() - 2)
				{
					tem_result += -coeff[i] * using_number[i + 1];
				}
				using_number.pop_front();
				using_number.pb(tem_result);
			}
		}
	
		final_result = using_number.back();
		cout << "Term " << k + n << " of the sequence is " << final_result << "\n";

		cin >> n;
	}
	return 0;
}

vector<int> cal_coeff(int n)
{
	vector<int> result;
	vector<int> init_coeff = { 1, 2, 1 };
	vector<int> abs_coeff;
	// step 1 : calculate absolute value of coefficient
	if (n == 2)
	{
		abs_coeff = init_coeff;
	}
	else
	{
		abs_coeff = init_coeff;
		vector<int> temp_abs_coeff;
		FOR(i, 1, n - 1)
		{
			temp_abs_coeff.pb(1);
			FOR(j, 1, i - 1)
			{
				int g = abs_coeff[j - 1] + abs_coeff[j];
				temp_abs_coeff.pb(g);
			}
			temp_abs_coeff.pb(1);
			
			abs_coeff = temp_abs_coeff;
			temp_abs_coeff.erase(temp_abs_coeff.begin(), temp_abs_coeff.end());
		}
	}

	// step 3 : include -1 and 1
	FOR(i, 0, abs_coeff.size() - 1)
	{
		if (i % 2 == 0)
		{
			result.pb(abs_coeff[i]);
		}
		else
		{
			result.pb(-1 * abs_coeff[i]);
		}
	}
	return result;
}
ll cal_stable_value(deque<ll> init_number, vector<int> coeff)
{
	ll result = 0;
	if (init_number.size() != coeff.size())
	{
		cout << "Unmatch size of init_number and coeff";
	}
	FOR(i, 0, coeff.size() - 1)
	{
		result += coeff[coeff.size() - i - 1] * init_number[i];
	}
	return result;
}
